//
// Generated file, do not edit! Created by nedtool 5.4 from msg/packetIn.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __PACKETIN_M_H
#define __PACKETIN_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>msg/packetIn.msg:2</tt> by nedtool.
 * <pre>
 * message packetInMsg
 * {
 *     string header;
 *     int buffer_id; //a unique value used to track the buffered packet
 *     int total_len; //The length of the captured packet is indicated by total_len
 *     string in_port; //The port the packet was recieved on is indicated by in_port
 *     string reason; //The reason field indicates why the packet has been captured and forwarded (NoMatch, Action)
 * }
 * </pre>
 */
class packetInMsg : public ::omnetpp::cMessage
{
  protected:
    ::omnetpp::opp_string header;
    int buffer_id;
    int total_len;
    ::omnetpp::opp_string in_port;
    ::omnetpp::opp_string reason;

  private:
    void copy(const packetInMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const packetInMsg&);

  public:
    packetInMsg(const char *name=nullptr, short kind=0);
    packetInMsg(const packetInMsg& other);
    virtual ~packetInMsg();
    packetInMsg& operator=(const packetInMsg& other);
    virtual packetInMsg *dup() const override {return new packetInMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const char * getHeader() const;
    virtual void setHeader(const char * header);
    virtual int getBuffer_id() const;
    virtual void setBuffer_id(int buffer_id);
    virtual int getTotal_len() const;
    virtual void setTotal_len(int total_len);
    virtual const char * getIn_port() const;
    virtual void setIn_port(const char * in_port);
    virtual const char * getReason() const;
    virtual void setReason(const char * reason);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const packetInMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, packetInMsg& obj) {obj.parsimUnpack(b);}


#endif // ifndef __PACKETIN_M_H

