//
// Generated file, do not edit! Created by nedtool 5.4 from msg/packetOut.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __PACKETOUT_M_H
#define __PACKETOUT_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
    #include <map>
    #include <string>
    typedef std::map<std::string,std::string> actionList;
// }}

/**
 * Class generated from <tt>msg/packetOut.msg:10</tt> by nedtool.
 * <pre>
 * message packetOutMsg
 * {
 *     string header;
 *     int buffer_id; //a unique value used to track the buffered packet
 *     int actions_len; //Size of action array
 *     actionList action;  //list of actions to apply to the raw packet (Output (nextNodeName), Drop, Set TTL, Experimenter)
 *     string in_port; //If OFPP_TABLE is specified as the output port of an action, the in_port in the packet_out message is used in the flow table lookup.
 * }
 * </pre>
 */
class packetOutMsg : public ::omnetpp::cMessage
{
  protected:
    ::omnetpp::opp_string header;
    int buffer_id;
    int actions_len;
    actionList action;
    ::omnetpp::opp_string in_port;

  private:
    void copy(const packetOutMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const packetOutMsg&);

  public:
    packetOutMsg(const char *name=nullptr, short kind=0);
    packetOutMsg(const packetOutMsg& other);
    virtual ~packetOutMsg();
    packetOutMsg& operator=(const packetOutMsg& other);
    virtual packetOutMsg *dup() const override {return new packetOutMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const char * getHeader() const;
    virtual void setHeader(const char * header);
    virtual int getBuffer_id() const;
    virtual void setBuffer_id(int buffer_id);
    virtual int getActions_len() const;
    virtual void setActions_len(int actions_len);
    virtual actionList& getAction();
    virtual const actionList& getAction() const {return const_cast<packetOutMsg*>(this)->getAction();}
    virtual void setAction(const actionList& action);
    virtual const char * getIn_port() const;
    virtual void setIn_port(const char * in_port);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const packetOutMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, packetOutMsg& obj) {obj.parsimUnpack(b);}


#endif // ifndef __PACKETOUT_M_H

